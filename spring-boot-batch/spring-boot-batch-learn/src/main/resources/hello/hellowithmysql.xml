<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans default-lazy-init="false"
	   xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:batch="http://www.springframework.org/schema/batch"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
			http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:p="http://www.springframework.org/schema/p">

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/springbatch" />
		<property name="username" value="root" />
		<property name="password" value="root" />
		<property name="validationQuery" value=""/>
<!--		<property name="maxActive" value="100" />-->
<!--		<property name="initialSize" value="10" />-->
<!--		<property name="maxWait" value="10000" />-->
<!--		<property name="minIdle" value="10" />-->
	</bean>

<!--	<jdbc:initialize-database data-source="dataSource" enabled="false">-->
<!--		<jdbc:script location="classpath*:org/springframework/batch/core/schema-mysql.sql"/>-->
<!--	</jdbc:initialize-database>-->

	<!-- spring的事务管理器  PlatformTransactionManager接口的实现-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"
	/>

	<batch:job-repository id="jobRepository"
			  data-source="dataSource"
			  transaction-manager="transactionManager"
			  isolation-level-for-create="REPEATABLE_READ"
			  table-prefix="BATCH_"
			  max-varchar-length="1000"
	/>

<!--	<bean id="jobRegistry" class="org.springframework.batch.core.configuration.support.MapJobRegistry"/>-->
<!--	<bean class="org.springframework.batch.core.configuration.support.JobRegistryBeanPostProcessor"-->
<!--		p:jobRegistry-ref="jobRegistry"-->
<!--	/>-->

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>

	<bean id="hReader" class="com.hzw.learn.springboot.batchbase.hello.HReader" scope="step"/>
	<bean id="hProdessor" class="com.hzw.learn.springboot.batchbase.hello.HProdessor"/>
	<bean id="hWriter" class="com.hzw.learn.springboot.batchbase.hello.HWriter"/>


<!--	<bean id="jobOprator" class="org.springframework.batch.core.launch.support.SimpleJobOperator"-->
<!--		  p:jobRegistry-ref="jobRegistry"-->
<!--		  p:jobRepository-ref="jobRepository"-->
<!--		  p:jobLauncher-ref="jobLauncher"-->
<!--	/>-->

	<batch:job id="helloJob" job-repository="jobRepository">
		<batch:step id="hstep"  next="hstep2">
			<batch:tasklet>
				<batch:chunk reader="hReader" processor="hProdessor" writer="hWriter" commit-interval="10"/>
			</batch:tasklet>
		</batch:step>

		<batch:step id="hstep2" >
			<batch:tasklet>
				<batch:chunk reader="hReader" processor="hProdessor" writer="hWriter" commit-interval="10"/>
			</batch:tasklet>
		</batch:step>
	</batch:job>

</beans>
